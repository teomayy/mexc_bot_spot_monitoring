import asyncio
import json
import logging
import random
import websockets
import sys
import os
import requests
from datetime import datetime, timezone, timedelta
from google.protobuf.message import DecodeError

# –î–æ–±–∞–≤–ª—è–µ–º websocket-proto –≤ PYTHONPATH
sys.path.append(os.path.abspath("websocket_proto"))
import PushDataV3ApiWrapper_pb2

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "TOKEN –ë–û–¢–ê"
TELEGRAM_CHAT_ID = "–í–ê–® –ß–ê–¢ ID"
ORDER_THRESHOLD = 2000  # üí∞ –ü–æ—Ä–æ–≥ —Å–¥–µ–ª–∫–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π)
VOLUME_THRESHOLD = 50  # üìä –ü–æ—Ä–æ–≥ –æ–±—ä–µ–º–∞ –∑–∞ 1 –º–∏–Ω—É—Ç—É
WS_URL = "wss://wbs-api.mexc.com/ws"
RECONNECT_DELAY = 5
TICKERS_PER_BATCH = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏

# üêú –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢—Ä–µ–∫–∏–Ω–≥ –æ–±—ä–µ–º–∞ —Å–¥–µ–ª–æ–∫
volume_tracker = {}

# ‚ùå –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∏—Ä–∂ (Binance, Bybit, OKX)
EXCLUDED_EXCHANGES = {"binance", "bybit", "okx"}

async def get_all_tickers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤ —Å MEXC API"""
    url = "https://api.mexc.com/api/v3/defaultSymbols"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
        logger.info(f"üîç –û—Ç–≤–µ—Ç API MEXC: {data}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä—ã
        if isinstance(data, dict) and "data" in data:
            tickers = data["data"]
            if isinstance(tickers, list):
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
                return tickers
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: 'data' –Ω–µ —Å–ø–∏—Å–æ–∫! {type(tickers)}")
                return []
        else:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API: {data}")
            return []
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤: {e}")
        return []

def filter_tickers(tickers):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–∏–∫–µ—Ä—ã: –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ç –∏ –∏—Å–∫–ª—é—á–∞–µ—Ç –¥—É–±–ª–∏ —Å Binance, Bybit, OKX"""
    filtered_tickers = [
        ticker for ticker in tickers
        if not any(exchange in ticker.lower() for exchange in EXCLUDED_EXCHANGES)
    ]
    logger.info(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_tickers)} —Ç–∏–∫–µ—Ä–æ–≤")
    return filtered_tickers

def update_volume_tracker(ticker, volume):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–º —Å–¥–µ–ª–æ–∫ –∑–∞ 1 –º–∏–Ω—É—Ç—É"""
    now = datetime.now(timezone.utc)
    
    if ticker not in volume_tracker:
        volume_tracker[ticker] = []

    volume_tracker[ticker].append((volume, now))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–¥–µ–ª–∫–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
    volume_tracker[ticker] = [(v, t) for v, t in volume_tracker[ticker] if now - t < timedelta(minutes=1)]
    
    total_volume = sum(v for v, _ in volume_tracker[ticker])
    print(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω –æ–±—ä–µ–º –¥–ª—è {ticker}: {total_volume} USDT")  # –î–æ–±–∞–≤–∏–ª–∏ print

    return total_volume


async def subscribe_to_tickers(ws, tickers):
    print(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∏–∫–µ—Ä—ã: {tickers}")  # <-- –î–æ–±–∞–≤–∏–ª–∏ print
    subscribe_msg = {
        "method": "SUBSCRIPTION",
        "params": [f"spot@public.aggre.deals.v3.api.pb@100ms@{ticker}" for ticker in tickers],
        "id": random.randint(1, 100000)
    }
    print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è: {json.dumps(subscribe_msg, indent=2)}")
    await ws.send(json.dumps(subscribe_msg))
    logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")



async def send_ping(ws):
    while True:
        try:
            print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ PING")  # <-- –î–æ–±–∞–≤–∏–ª–∏ print
            logger.info("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω PING")
            await ws.send(json.dumps({"method": "PING"}))
        except websockets.exceptions.ConnectionClosed:
            print("‚ö†Ô∏è WebSocket –∑–∞–∫—Ä—ã—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º PING")
            logger.warning("‚ö†Ô∏è WebSocket –∑–∞–∫—Ä—ã—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º PING")
            break
        await asyncio.sleep(30)


def on_open(ws):
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")  # <-- –î–æ–±–∞–≤–∏–ª–∏ print
    tickers = get_tickers()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–æ–≤
    subscribe_to_tickers(ws, tickers)

def on_close(ws, close_status_code, close_msg):
    print(f"‚ö†Ô∏è WebSocket –∑–∞–∫—Ä—ã—Ç! –ö–æ–¥: {close_status_code}, –°–æ–æ–±—â–µ–Ω–∏–µ: {close_msg}")  # <-- –î–æ–±–∞–≤–∏–ª–∏ print

def on_error(ws, error):
    print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {error}")  # <-- –î–æ–±–∞–≤–∏–ª–∏ print


async def handle_messages(ws):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket"""
    async for message in ws:
        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket: {message[:500]}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        try:
            if isinstance(message, str):  # JSON-–æ—Ç–≤–µ—Ç
                data_json = json.loads(message)

                if "deals" in data_json:
                    symbol = data_json.get("symbol", "UNKNOWN")
                    print(f"üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –ø–æ {symbol}: {data_json['deals']}")  # –î–æ–±–∞–≤–ª—è–µ–º print

                    for deal in data_json["deals"]:
                        price = float(deal.get("price", 0))
                        volume = float(deal.get("quantity", 0))
                        total = price * volume
                        side = "BUY" if deal.get("tradeType") == 1 else "SELL"

                        total_volume = update_volume_tracker(symbol, volume)

                        print(f"üí∞ –°–¥–µ–ª–∫–∞ {side} {symbol}: {total:.2f} USDT (–ü–æ—Ä–æ–≥ {ORDER_THRESHOLD}, –û–±—ä–µ–º {total_volume})")

                        if total >= ORDER_THRESHOLD and total_volume >= VOLUME_THRESHOLD:
                            await send_telegram_message(total, symbol, side)
                continue

            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ, –ø–∞—Ä—Å–∏–º Protobuf
            data = PushDataV3ApiWrapper_pb2.PushDataV3ApiWrapper()
            data.ParseFromString(message)

            if hasattr(data, "publicAggreDeals"):
                symbol = data.symbol
                print(f"üìä Protobuf-—Å–¥–µ–ª–∫–∞ –ø–æ {symbol}: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º Protobuf-—Å–æ–æ–±—â–µ–Ω–∏–µ

                for deal in data.publicAggreDeals.deals:
                    price = float(deal.price)
                    volume = float(deal.quantity)
                    total = price * volume
                    side = "BUY" if deal.tradeType == 1 else "SELL"

                    total_volume = update_volume_tracker(symbol, volume)

                    print(f"üí∞ Protobuf {side} {symbol}: {total:.2f} USDT (–ü–æ—Ä–æ–≥ {ORDER_THRESHOLD}, –û–±—ä–µ–º {total_volume})")

                    if total >= ORDER_THRESHOLD and total_volume >= VOLUME_THRESHOLD:
                        await send_telegram_message(total, symbol, side)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç 'publicAggreDeals' –≤ Protobuf: {data}")

        except json.JSONDecodeError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö")
        except DecodeError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Protobuf –¥–∞–Ω–Ω—ã—Ö")


async def send_telegram_message(order_size, ticker, side):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""

    if text:
        message = text
    else: 
        message = f"{'üü¢' if side == 'BUY' else 'üî¥'} *{ticker.replace('USDT', '')}*\n\nüí∞ {order_size:.2f} $"

    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }

    print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {message}")  # –î–æ–±–∞–≤–∏–ª–∏ print
    print(f"üîó –ó–∞–ø—Ä–æ—Å: {telegram_url}, –î–∞–Ω–Ω—ã–µ: {payload}")  # –õ–æ–≥–∏—Ä—É–µ–º URL –∏ payload

    try:
        response = requests.post(telegram_url, json=payload)
        response_data = response.json()
        print(f"üì© –û—Ç–≤–µ—Ç Telegram API: {response_data}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
        response.raise_for_status()

        if not response_data.get("ok"):
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response_data.get('description')}")
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")




async def connect_to_mexc(tickers):
    while True:
        try:
            print(f"üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤")  # <-- –î–æ–±–∞–≤–∏–ª–∏ print
            async with websockets.connect(WS_URL) as ws:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket MEXC")
                await subscribe_to_tickers(ws, tickers)
                await asyncio.gather(handle_messages(ws), send_ping(ws))
        except websockets.exceptions.ConnectionClosedError:
            print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {RECONNECT_DELAY} —Å–µ–∫—É–Ω–¥...")
            logger.warning(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {RECONNECT_DELAY} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(RECONNECT_DELAY)


MAX_ACTIVE_CONNECTIONS = 5  # –û–≥—Ä–∞–Ω–∏—á–∏–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

async def send_telegram_message(order_size=None, ticker=None, side=None, text=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    if text:
        message = text  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    else:
        message = f"{'üü¢' if side == 'BUY' else 'üî¥'} *{ticker.replace('USDT', '')}*\n\nüí∞ {order_size:.2f} $"

    telegram_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }

    print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {message}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"üîó –ó–∞–ø—Ä–æ—Å: {telegram_url}, –î–∞–Ω–Ω—ã–µ: {payload}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∏ payload

    try:
        response = requests.post(telegram_url, json=payload)
        response_data = response.json()
        print(f"üì© –û—Ç–≤–µ—Ç Telegram API: {response_data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ API
        response.raise_for_status()

        if not response_data.get("ok"):
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response_data.get('description')}")
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

async def main():
    tickers = await get_all_tickers()
    tickers = filter_tickers(tickers)

    if not tickers:
        logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram API
    user_info_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getChat?chat_id={TELEGRAM_CHAT_ID}"
    try:
        response = requests.get(user_info_url)
        user_data = response.json()
        username = user_data.get("result", {}).get("first_name", "–¥—Ä—É–≥")  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "–¥—Ä—É–≥"
    except requests.RequestException:
        username = "–¥—Ä—É–≥"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_telegram_message(text=f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n–Ø –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–¥–µ–ª–∫–∏ –Ω–∞ MEXC.")

    tasks = []
    for i in range(0, len(tickers), TICKERS_PER_BATCH):
        if len(tasks) >= MAX_ACTIVE_CONNECTIONS:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            done, tasks = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)
        batch = tickers[i:i + TICKERS_PER_BATCH]
        tasks.append(asyncio.create_task(connect_to_mexc(batch)))
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())